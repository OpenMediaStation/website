{"/en/docs/":{"data":{"":"Welcome to our documentation. If you find an error here or need more information feel free to create an issue on GitHub."},"title":"Docs"},"/en/docs/getting-started/":{"data":{"":" WARNING: The software is in a early stage of development. Please use it with care.","get-the-clients#Get the clients":"You can obtain the client from the artifacts of the latest release.","server-installation#Server installation":" At first get the Docker image for the server. docker pull ghcr.io/openmediastation/openmediaserver:latest Use the following environment variables. DOMAIN=example.com AUTH_CLIENTID=AAAAAAAAAAAAAAAAAA AUTH_CONFIGURATION_URL=https://auth.example.com/application/o/open-media-station/.well-known/openid-configuration TMDB_KEY=aaaaaaaaaaaaaaaaaaaaaaa Map the port 8080 of the container to your https port.\nMake sure to mount your media directory to /media and provide a empty directory for the server files at /config."},"title":"Getting started"},"/en/docs/setup-authentik/":{"data":{"":"You can use any identity provider that supports OAuth with your OpenMediaStation (OMS) instance. This guide focuses on the Authentik identity provider, but the same settings can be applied to other providers.","creating-an-application#Creating an Application":"To connect Authentik to OMS, we first need to create a public application in Authentik and save the ClientId and ConfigurationURL for later use in OMS.\nTo create an application, navigate to the Applications tab in the admin interface, as shown in the image below.\nIn this menu, click the Create with wizard button.\nEnter an application name and slug (used in the URL). These values can be set freely.\nAfter clicking Next, you will be prompted to choose a provider type. Select OAuth2/OpenID Provider.\nIn the next menu, configure the OAuth2 provider settings. You can choose any name. For Authorization flow, select default-provider-authorization-explicit-consent and for ClientType, choose Public.\nThe Client ID displayed now should be saved for later use in the OpenMediaStation configuration, as described in Getting Started.\nNow, enter two redirect URIs:\nMobile apps: my.test.app:/oauth2redirect Desktop: http://localhost:8000/redirect.html Please enter both URIs, even if you do not plan to use a specific platform.\nNext, set the Authentication flow to default-authentication-flow and adjust the Access Token validity to hours=5. (This setting is required due to a bug in a library we use. It may be reduced in a future release or if you are using a third-party frontend application.)\nWhen selecting scopes, be sure to include the offline_access scope. After that, click Next to complete the application setup.\nFinally, copy the OpenID Configuration URL of your newly created provider and proceed with the OMS installation.\nIf you have not yet set up a device code flow, continue with the next section.","ensuring-the-device-code-flow-exists#Ensuring the Device Code Flow Exists":"A Device code flow must be selected in System/Brands/{YourBrand}/Default flows. A default option should be available for selection."},"title":"Setting Up Authentik"},"/en/docs/what-is-openmediastation/":{"data":{"":"OpenMediaStation (OMS) is designed to be a central hub for hosting all the media files you own.\nOur goal is to give the control back to the user which has been lost due to various streaming services and the misleading concept of “buying” a license to access media rather than truly owning it. With this project, we aim to restore that control. Users who purchase media from sources that allow file downloads can use OMS to manage and view their collection in one place.\nOMS supports various media types, including movies, TV shows, audiobooks, books and more. (Currently, movies and TV shows are fully supported, with additional media types planned for future releases.)\nWhile similar projects exist, none fully met our needs. We strongly believe in open-source software and the only real alternative that supports multiple media types is Jellyfin. However, Jellyfin’s support for books and audiobooks is lacking. Our goal is to offer robust support for these media types, making them a core focus of our development.\nAdditionally, we prioritize user privacy. We do not collect unnecessary data or make it easy for third parties to do so. However, privacy also requires strong security. Unlike Jellyfin, which lacks proper security when exposed to the internet, OMS was created with security in mind. (I will cover this topic in more detail in a future blog post.) To enhance security, OMS allows users to integrate a third-party identity provider via OAuth, significantly improving authentication compared to Jellyfin."},"title":"What is OpenMediaStation (OMS)"},"/en/privacy-policy/":{"data":{"":"No data is shared with us if you are using Open Media Station."},"title":"Privacy Policy"}}